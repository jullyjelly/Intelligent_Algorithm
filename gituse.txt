git使用总结：

vim模式可以在bach模式下更改文件内容（vim README.md)
i插入，esc命令模式，：wq保存离开
https://www.runoob.com/linux/linux-vim.html
pwd查看当前在哪个文件夹下
ls -a 查找当前文件夹下的文件（包括隐藏文件）
ll 查看当前文件夹下的文件数量
git status 查看当前状态
git init 初始化仓库
git add 将文件添加到暂存区
git commit -m "提交备注"

若将修改提交到了暂存区但还未commit到最终仓库（暂存区到工作区回滚）：
	git reset HEAD （文件名）     将暂存区的修改回归到工作区 
	git checkout -- （文件名）   清理工作区
	图形界面：直接从暂存区丢弃该文件
若修改已经commit：
	git log 查看日志，若日志太多无法结束时可以按q结束
	git reset --hard （log查看到的对应的commit_id） 暂存区和最终仓库中的文件都回滚到上一次需求
	图形界面：重置分支到上一次提交，有未提交的更改出现在了工作区，丢弃工作区的文件

清空本地仓库：
	git rm (本地文件名) 清空工作区（此时暂存区和仓库还未清空）
	git commit -m “备注”  提交后才清空仓库
	图形界面：工作区删除，删除动作出现在工作区中，从工作区添加到暂存区，再从暂存区进行最终的提交，这次提交后才会删除文件
			
创建SSH key：
	ssh-keygen -t rsa -C "xxx@xx.com" 注册github账号的邮箱   
	可默认通过回车进行后续的选择，passphrase可以不用输，若已有key可以直接输入y覆盖
	在c/Users/用户名下面找到/.ssh文件夹
	路径改到/.ssh文件夹下，输入cat id_rsa.pub回车得到SSH key，将该key复制到github中setting下的new SSH key中
	输入ssh -T git@github.com可检查是否已经连通，遇到warning再连接一次应该就没问题了，出现hi
	
添加远程仓库：
命令行：
	在github上新建一个仓库，可以直接复制里面提示的命令
	....
	git remote add origin https://github.com/jullyjelly/first_try.git
	git push -u origin master 将本地的master与远程的master关联并推送
	即可成功推上github
	若再次提交可以直接git push，因为已经关联了
图形界面：
	右键master，点击创建拉取请求，点击远程仓库中的添加，远端名称写origin，
	路径从新建的远程仓库中复制过来，用户名是提交的用户名。若远程下面有一个origin则关联成功
	右键master，选择推送到origin，直接默认推送即可无需设置
	此时可能会出现推送失败的情况，工具->选项->一般->SSH客户端改成openSSH即可


把旧项目提交到Git上，但是会有一些历史记录，删除这些历史记录，形成一个全新的仓库，并且保持代码不变：
	git checkout --orphan latest_branch
	git add -A
	git commit -am "commit message"
	git branch -D master
	git branch -m master
	git push -f origin master
	https://segmentfault.com/a/1190000013082390

github提交回退旧版本代码并更改后的文件到主分支上：
	git reset --hard （log查看到的对应的commit_id）
	git push origin master --force 强行覆盖远程记录
	https://segmentfault.com/q/1010000009800764/a-1020000009800939
	
克隆仓库：
	命令模式：
	git clone git@github.com:jullyjelly/clone1.git（复制的地址）
	cd clone1并进行下一步操作（echo，git add，git commit）
	可直接git push，因为已经进行了关联
	克隆会新建一个远程仓库同名的文件夹，因此可以不用自己新建文件夹，可直接在有其他仓库的文件夹下操作
	图形化界面：
	需要新建一个文件夹
	添加->克隆，复制SSH到源路径，设置目标路径即新建的文件夹
	添加文件，然后自动建立了远程可以直接推送
	
标签管理：

	git tag 查看所有标签
	git tag （name 如v1.0.1） 创建标签
	git push origin (name 如v1.0.1) 标签发布，推送到远程
	可在github文件上方的branch->tag来查看标签
	其他命令：
	git tag -a (name)-m "comment备注"
	git tag -d name 删除标签
	图形界面：工具栏上方点击标签，命名，选择指定的提交（commit id），勾选推送标签到origin即可推送到远程
	右键标签，点击删除即可删除标签，在弹出的对话框中勾选删除远程就可以同时删除远程仓库中的标签了
	
分支管理：
	git branch （feat）  添加新分支
	git branch 查看当前branch 带绿色星号的即为当前branch
	git checkout （feat）  切换分支
	在当前分支下进行操作
	若需要分支合并：切换到要合并的分支下git checkout （master）
	git merge （feat） 将feat分支合并到master上
	git branch -d （feat） 删除分支
	图形界面：
	工具栏点击分支->新分支—>输入分支名->勾选工作副本原本
	双击哪个分支即在哪个分支下操作
	操作完以后，若需要合并，工具栏点击合并，点击指定的commit，左下角可点击立即合并提交
	
版本回退错误的解决：
	https://blog.csdn.net/themagickeyjianan/article/details/78923322
	
	

